# -*- coding: utf-8 -*-
"""Agent addition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NklzPAQtaLTa2E9eUjORVC1hNu2P88az
"""

"""#LOGS

1. Adding 2 additional agents that will create the jest.config file and the package.json
2. Adding gemini 2.5 pro exp
3. Use the manager LLM approach
"""

#API KEYS
import os
os.environ['EXA_API_KEY']
os.environ['OPENAI_API_KEY']

from crewai_tools import DirectoryReadTool
from crewai_tools import FileReadTool
from crewai_tools import EXASearchTool
from crewai_tools import CodeDocsSearchTool
from exa_py import Exa
from crewai.tools import tool

#TOOLS SET 1
directory_read_tool=DirectoryReadTool('gcc-national-registry-dashboard-Dev_Branch/server/src/controller')
file_read_tool=FileReadTool()
docs_search_tool=CodeDocsSearchTool('https://archive.jestjs.io/docs/en/22.x/getting-started.html')

#TOOLS SET 2
#Exa Search Tool
exa_api_key = os.getenv("EXA_API_KEY")

@tool("Exa search and get contents")
def search_and_get_contents_tool(question: str) -> str:
    """Tool using Exa's Python SDK to run semantic search and return result highlights."""

    exa = Exa(exa_api_key)

    response = exa.search_and_contents(
        question,
        type="neural",
        use_autoprompt=True,
        num_results=3,
        highlights=True
    )

    parsedResult = ''.join([
    f'<Title id="{idx}">{eachResult.title}</Title>'
    f'<URL id="{idx}">{eachResult.url}</URL>'
    f'<Highlight id="{idx}">{"".join(eachResult.highlights)}</Highlight>'
    for idx, eachResult in enumerate(response.results)
])

    return parsedResult

exa_tool=search_and_get_contents_tool

#LLMS
#Testing all LLM combinations
from crewai import LLM
llm_gemma_1=LLM(model="groq/gemma2-9b-it",temperature=0) #chaitany_api_key
llm_gemma_2=LLM(model="groq/gemma2-9b-it",temperature=0) #hardik_api_key
llm_openai_4o=LLM(model="openai/gpt-4o-mini",temperature=0)
llm_openai_o3=LLM(model="openai/o1-mini-2024-09-12", temperature=0)

"""Gemini 2.5 pro exp"""

llm_gemini=LLM(model='gemini/gemini-2.5-pro-exp-03-25')

from crewai import Agent, Task, Crew, Process

#Agent 1
#directory_listing_agent= This agent will retrieve the path of all the files in the directories.

directory_listing_agent=Agent(
    role="Directory Listing Agent",
    goal="Identify and return all file paths within the specified directory, including subdirectories.",
    backstory=(
            "This agent scans the entire directory and retrieves a structured list of file paths, "
            "which will be used for further content extraction and analysis."
        ),
    tools=[directory_read_tool],
    llm=llm_gemma_1,
    memory=True,
    verbose=True
    )

directory_listing_task=Task(
    description="Scan the specified directory and list all file paths, including those in subdirectories.",
    expected_output="A structured list of absolute file paths, saved in 'file_paths.md' with one file path per line.",
    agent= directory_listing_agent,
    output_file="file_paths_2.md"
)

#Agent 2
#file_extraction_agent= This agent will extract all the code

file_extraction_agent=Agent(
    role="Code File Consolidator",
    goal="Extract complete source code from multiple files and combine them into a single consolidated output while preserving file boundaries and organizational structure.",
    backstory="A specialized assistant that efficiently processes multiple source code files, extracts their full content without modification, and arranges them in a single organized document for comprehensive analysis.",
    tools=[file_read_tool],
    llm=llm_openai_4o,
    function_calling_llm=llm_gemma_2,
    memory=True,
    verbose=True,
)

file_extraction_task=Task(
    description="Extract all JavaScript code from the file paths provided by the directory_listing_task and save it as a single consolidated JavaScript file.",
    expected_output="""
    A JavaScript file (`extracted_code.js`) that contains all extracted JavaScript code from the file paths listed in 'file_paths.md', with the following requirements:

    1. IMPORTANT: Not a single line of code should be missed. Ensure 100% extraction accuracy from all listed files.
    2. Read and process each JavaScript file path provided in the output of directory_listing_task
    3. Each extracted file must begin with a clear file header showing the original filename
    4. All code, comments, and whitespace must be preserved exactly as found in the original files
    5. Files must be separated by clear visual delimiters for easy navigation
    6. The entire content of each file must be included with no truncation
    7. No explanations, summaries, or analysis of the code should be included
    8. The code must not be modified, optimized, or reformatted in any way
    9. If a file cannot be read, a comment documenting the specific error must be included
    10. Return only the consolidated file content - no additional commentary
    11. The entire content of each file should be accurately extracted
    """,
    agent=file_extraction_agent,
    context=[directory_listing_task],
    output_file="extracted_code.js"
)

#Agent 3- This agent will divide the code into units

code_segmentation_agent = Agent(
    role="JavaScript Code Unit Segmentation Agent",
    goal="Break down the extracted JavaScript code into individual units (functions, classes, modules, and components) for structured analysis.",
    backstory="This agent specializes in parsing JavaScript code structure to identify discrete functional units such as functions, classes, ES6 modules, React components, and other JavaScript-specific patterns, enabling effective dependency mapping and test generation.",
    llm=llm_openai_4o,
    function_calling_llm=llm_gemma_2,
    memory=True,
    verbose=True
)

code_segmentation_task = Task(
    description="Segment the extracted JavaScript code into logical units such as functions, classes, components, and modules. Each segment should be properly formatted and structured for easy analysis. Ensure EVERY code unit is identified and documented with no omissions.",
    expected_output="""
    A structured JavaScript file (`segments.js`) that contains each JavaScript code unit as an independent, clearly separated segment, with the following requirements:

    1. IMPORTANT: Every segment must include actual code from the original file. Do not generate placeholders, metadata-only entries, or empty sections. The code must be directly extracted, and no segment should be documented without its real source code block.

    2. Identify and separate ALL JavaScript-specific code units, including but not limited to:
      - ES6 classes and their methods
      - Function declarations and function expressions
      - Arrow functions that define components or utilities
      - ES6 modules (import/export statements)
      - React components (functional and class-based)
      - Object literals that define structured interfaces
      - Prototype-based inheritance patterns
      - IIFE (Immediately Invoked Function Expressions)
      - Event handlers and callbacks
      - Async functions and Promises
      - Anonymous functions and nested functions
      - Higher-order functions

    3. For each code unit, include:
      - Original file name
      - Line numbers (start-end) from the original file
      - Complete implementation with preserved formatting
      - Type of unit (function, class, component, etc.)
      - Dependencies and imports used by the unit

    4. Preserve JavaScript-specific patterns like closures and lexical scoping

    5. Track both CommonJS and ES6 module syntax appropriately

    6. Include module exports to document public interfaces

    7. Properly document framework-specific components (React, Vue, Angular, etc.)

    8. Organize segments hierarchically when appropriate (e.g., methods under their classes)

    9. Ensure COMPLETE coverage - every single line of code must be accounted for in at least one segment

    10. Do not omit any code segment

    11. For overlapping segments (e.g., a function within a class), include the code in both relevant sections with appropriate cross-references
    """,
    agent=code_segmentation_agent,
    context=[file_extraction_task],
    output_file="segments.js"
)

#Agent 4- This agent will generate the jest test cases

test_case_generator=Agent(
        role="Automated JavaScript Test Case Generator",
        goal="Analyze the segmented JavaScript code and generate comprehensive Jest test cases for each function, class, component, and module to ensure correctness, edge-case handling, and robustness.",
        backstory="An AI-powered JavaScript testing expert designed to deeply understand modern JS code structure, dependencies, and functionality. It generates precise and efficient Jest test cases covering various scenarios, including positive, negative, and edge cases, with special focus on asynchronous patterns and React components.",
        llm=llm_gemini,
        tools=[exa_tool, docs_search_tool],
        function_calling_llm=llm_gemma_2,
        human_input=True,
        memory=True,
        verbose=True,
)

test_case_generation_task = Task(
    description="Generate comprehensive Jest test cases for all JavaScript functions, classes, components, and modules based on the segmented code structure.",
    expected_output="""
==================== ‚ö†Ô∏è IMPORTANT INSTRUCTIONS ‚ö†Ô∏è ====================

DO NOT SKIP ANY CODE UNITS.

üî¥ You MUST write unit and integration tests for **EVERY** function, class, component, and module.
üî¥ DO NOT suggest that other units will be "similar" and can be skipped.
üî¥ This system is intended for **automation**‚Äîmanual effort must be **eliminated**.
üî¥ Provide **explicit and complete Jest test cases** for each identified unit.
üî¥ Your output will be directly used in a CI/CD pipeline; incomplete outputs are unacceptable.

======================================================================

‚úÖ OUTPUT REQUIREMENT:
A complete and organized set of Jest test files that includes:

1. **Test Coverage Goal**:
   - At least **90% code coverage** for **statements**, **branches**, **functions**, and **lines** using `jest --coverage`.
   - Include:
     - Valid input scenarios (happy path)
     - Edge cases (`null`, `undefined`, empty arrays/objects, min/max values)
     - Error handling and exception cases
     - Asynchronous testing (Promises, async/await)

2. **Dependencies**:
   - Mock unavailable or external dependencies using:
     - `jest.mock()` for modules
     - `jest.fn()` for functions with custom return values
     - Mock API calls and services

3. **React Component Testing (if applicable)**:
   - Use **React Testing Library** or **Enzyme**
   - Test:
     - Component rendering
     - Interaction/behavior
     - Context providers / Redux stores (mocked where required)

4. **Test Structure**:
   - Group tests using `describe` blocks
   - Setup/teardown with `beforeEach`, `afterEach` as needed
   - Maintain clarity between unit tests and integration tests

5. **File Format and Content**:
   - Reference original file/function/class names
   - Include all necessary imports
   - Follow Jest file naming conventions (`*.test.js` or `*.spec.js`)
   - Use Jest matchers (`toEqual`, `toBe`, `toThrow`, `toHaveBeenCalledWith`, etc.)

6. **Utilities**:
   - Include reusable fixtures or factory functions for test data

7. **Tools Usage**:
   - Actively use the provided tools:
     - `exa_tool` for researching JS testing best practices
     - `docs_search_tool` for Jest syntax, matchers, and strategies
   - Use tools to find strategies for complex patterns or framework-specific behaviors

8. **Path to Follow (Module Hierarchy)**:
   üîΩ Begin writing test cases in the following strict hierarchical order:

   /db/models          ‚Üí Write unit tests for all DB models
   /services           ‚Üí Write tests for service functions (unit + integration)
   /controller         ‚Üí Write controller tests (mock services and DB)
   /middleware         ‚Üí Write middleware logic tests
   /routes             ‚Üí Write route-level integration tests

   - For each folder/unit, generate a corresponding `*.test.js` file.
   - Maintain folder structure and clearly label each test file.
   - Use mocks for lower-level dependencies when testing higher-level modules.

üéØ Final Output:
A complete Jest test suite, with a dedicated test file for each code unit/module, organized by hierarchy, containing full coverage tests (unit + integration) ready for CI/CD pipelines.
""",
    agent=test_case_generator,
    context=[code_segmentation_task],
    output_file="test_cases.test.js"
)




# --- Agent for Jest Configuration ---
jest_config_agent = Agent(
    role="Jest Configuration Architect",
    goal="Design a fast, ESModule-compatible Jest configuration for backend Node.js projects using modern JavaScript and folder structures like `src/`, `controller/`, and `__tests__/`.",
    backstory=(
        "You are an expert in backend testing and configuration design. "
        "You specialize in setting up Jest for modern Node.js projects that use ES Modules (via `type: module`) and optimized transformers like `@swc/jest`. "
        "You're aware of how test environments, file structure, and transform settings interact and how to tune them for best performance."
    ),
    llm=llm_gemini,
    memory=True,
    verbose=True
)

# --- Task for Jest Configuration ---
jest_config_task = Task(
    description="Generate a `jest.config.js` for a modern Node.js backend project using ES Modules and JavaScript.",
    expected_output=(
        "A valid and complete `jest.config.js` file that includes:\n"
        "- `testEnvironment: 'node'`\n"
        "- `transform` using `@swc/jest` with:\n"
        "   - Parser: `ecmascript`, no JSX\n"
        "   - Target: `es2020`\n"
        "   - Module: ESM (`type: 'es6'`)\n"
        "   - Source maps enabled via `sourceMaps: 'inline'`\n"
        "- `testMatch` set to match files in `__tests__` with `.test.js` extension\n"
        "- `moduleFileExtensions`: ['js', 'mjs', 'cjs', 'json', 'node']\n"
        "- `moduleDirectories`: ['node_modules', '<rootDir>/src']\n"
        "- `roots`: ['<rootDir>/src']\n"
        "- `collectCoverage: true` for all relevant files\n"
        "- `coverageDirectory`: 'coverage'\n"
        "- `clearMocks: true`\n"
        "- `maxWorkers: 1`\n"
        "- Do NOT include deprecated or unnecessary fields like `extensionsToTreatAsEsm`\n"
        "- Assumes `type: module` is set in package.json for ESM compatibility\n"
        "- Test files are expected to be colocated or in `__tests__` directories"
    ),
    agent=jest_config_agent,
    context=[
        test_case_generation_task
    ],
    output_file="jest.config.js"
)

# --- Agent for Package.json Generation ---
package_json_agent = Agent(
    role="Node.js Package Setup Expert",
    goal="Create a minimal and optimized package.json for a backend project using Jest and ES Modules, ensuring devDependencies and scripts match the test setup.",
    backstory=(
        "You are an expert in Node.js toolchains. You help developers configure their projects using best practices. "
        "You specialize in writing minimal `package.json` files that support Jest testing, mock libraries like `node-mocks-http`, and ESModule configurations."
    ),
    llm=llm_gemini,
    memory=True,
    verbose=True,
)

# --- Task for Package.json Generation ---
package_json_task = Task(
    description="Generate a `package.json` file for a Node.js backend project using modern JavaScript and Jest for testing.",
    expected_output=(
        "A valid `package.json` file that includes:\n"
        "- `name`, `version`, `type: module`, and `main`\n"
        "- Scripts:\n"
        "   - `test`: `jest --coverage`\n"
        "   - `dev`: runs with `nodemon`\n"
        "   - `docs`: runs `jsdoc` for documentation (optional)\n"
        "- `devDependencies` should include:\n"
        "   - `jest`\n"
        "   - `@swc/jest` (used as transformer in `jest.config.js`)\n"
        "   - `node-mocks-http` for mocking Node.js HTTP requests/responses\n"
        "   - `nodemon` for development (optional)\n"
        "   - `jsdoc` for documentation (optional)\n"
        "- Ensure compatibility with `jest.config.js` generated above\n"
        "- Do NOT include unnecessary libraries like React, frontend frameworks, or TypeScript\n"
        "- Output must be valid JSON (no comments or trailing commas)\n"
        "- The project uses ES Modules (`type: module`) and source files are structured in `src/`, `controller/`, and `__tests__/` folders"
    ),
    agent=package_json_agent,
    context=[
        directory_listing_task,
        file_extraction_task,
        jest_config_task
    ],
    output_file="package.json"
)


#Testing the Agents

testing_crew=Crew(
    agents=[directory_listing_agent,file_extraction_agent,code_segmentation_agent, test_case_generator,jest_config_agent,package_json_agent],
    tasks=[directory_listing_task,file_extraction_task,code_segmentation_task, test_case_generation_task,jest_config_task,package_json_task],
    manager_llm=llm_openai_o3,
    process=Process.sequential
)
testing_crew.kickoff()
